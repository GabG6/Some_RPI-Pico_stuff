.program sbus

; Start with the situation that the number of ones received is zero (an even number)
; Read the 8 data bits and the parity bit (so, 9 bits in total)
; The even parity bit has to make the total number of ones odd!
; The code starts in the top half (the wrong parity part); if a one is observed it switches 
; to the bottom half (the correct parity part). If again a one is observed, it switches back to the top half. 
; Etc, switching back and forth every time a one is observed.

; the bits arrive LSB first, thus right-shift it into the ISR

.wrap_target
start:
    wait 1 pin 0            ; Stall until start bit is asserted
    set x, 8 [10]           ; read 8 data bits plus the parity bit. The parity bit should make a odd total of ones.
                            ; delay 12 cycles incl wait, set (8 cycles for the start bit, then 4 to get halfway the first data bit)
even_ones:
    in pins, 1              ; Shift data bit into ISR
    mov OSR ISR             ; test if it is a one or zero: copy it to the OSR and left-shift one bit out
    out y 1
    jmp !y even_ones_1      ; jump if y == 0, the number of ones doesn't change
    jmp odd_ones_2          ; the number of ones did change! Go to the bottom part (correct parity)
even_ones_1:
    jmp x-- even_ones [3]   ; Loop 9 times (8 data bits + the parity bit), each loop iteration is 8 cycles
    ; no need to wait for the stop bits, just stop already, the parity is wrong
    jmp end_and_restart
even_ones_2:                ; the only reason this is here is the [2] compared to [3] a couple of lines back
                            ; because after the "jmp !y" an extra jmp is made, which costs 1 cycle
    jmp x-- even_ones [2]   ; Loop 9 times (8 data bits + the parity bit), each loop iteration is 8 cycles
    ; no need to wait for the stop bits, just stop already, the parity is wrong
    jmp end_and_restart
;---------------------------------------------------------
; If the reading of 9 bits ends above: the parity is wrong
;
; If the reading of 9 bits ends below: the parity is correct
;---------------------------------------------------------
odd_ones:
    in pins, 1              ; Shift data bit into ISR
    mov OSR ISR             ; copy it to the OSR to get that bit into the y register
    out y 1                 ; 
    jmp !y odd_ones_1       ; jump if y == 0, the number of ones doesn't change
    jmp even_ones_2         ; the number of ones did change! Go to the top part (wrong parity)
odd_ones_1:
    jmp x-- odd_ones [3]    ; Loop 9 times (8 data bits + the parity bit), each loop iteration is 8 cycles
    ; all data has been read, no need to wait for the stop bits. The parity is correct
correct:
    mov OSR ISR             ; the parity bit is still in ISR, remove it: copy to OSR, left-shift the parity bit out
    out NULL 1
    mov ISR ~OSR            ; invert the data in the OSR and copy it to the ISR
    push                    ; push the ISR to the Rx FIFO
end_and_restart:
    wait 0 pin 0            ; wait for line to return to idle state.
    jmp start               ; Don't push data if we didn't see correct framing.
odd_ones_2:
    jmp x-- odd_ones [2]    ; Loop 9 times (8 data bits + the parity bit), each loop iteration is 8 cycles
    jmp correct             ; all data has been read, no need to wait for the stop bits. The parity is correct

